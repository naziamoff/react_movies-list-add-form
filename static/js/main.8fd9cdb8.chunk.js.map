{"version":3,"sources":["components/MovieCard/MovieCard.tsx","components/MoviesList/MoviesList.tsx","components/NewMovie/NewMovie.tsx","App.tsx","index.tsx"],"names":["MovieCard","title","description","imgUrl","imdbUrl","className","src","alt","href","MoviesList","movies","map","movie","imdbId","regex","NewMovie","addMovie","useState","setTitle","setDescription","setImdbUrl","setImgUrl","setImdbId","defaultValidation","isTitleValid","isImgValid","isUrlValid","isIdValid","isMovieValid","validation","setValidation","validateProp","value","prop","condition","test","trim","length","prev","useEffect","handleSubmit","type","classnames","placeholder","required","onChange","target","disabled","onClick","e","preventDefault","App","state","moviesFromServer","setState","concat","this","React","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.8fd9cdb8.chunk.js","sourcesContent":["import React from 'react';\nimport './MovieCard.scss';\n\ntype Props = Movie;\n\nexport const MovieCard: React.FC<Props> = ({\n  title, description, imgUrl, imdbUrl,\n}) => (\n  <div className=\"card\">\n    <div className=\"card-image\">\n      <figure className=\"image is-4by3\">\n        <img\n          src={imgUrl}\n          alt=\"Film logo\"\n        />\n      </figure>\n    </div>\n    <div className=\"card-content\">\n      <div className=\"media\">\n        <div className=\"media-left\">\n          <figure className=\"image is-48x48\">\n            <img\n              src=\"images/imdb-logo.jpeg\"\n              alt=\"imdb\"\n            />\n          </figure>\n        </div>\n        <div className=\"media-content\">\n          <p className=\"title is-8\">{title}</p>\n        </div>\n      </div>\n\n      <div className=\"content\">\n        {description}\n        <br />\n        <a href={imdbUrl}>IMDB</a>\n      </div>\n    </div>\n  </div>\n);\n","import React from 'react';\n\nimport './MoviesList.scss';\nimport { MovieCard } from '../MovieCard';\n\ninterface Props {\n  movies: Movie[];\n}\n\nexport const MoviesList: React.FC<Props> = ({ movies }) => (\n  <div className=\"movies\">\n    {movies.map(movie => (\n      <MovieCard key={movie.imdbId} {...movie} />\n    ))}\n  </div>\n);\n","import { useEffect, useState } from 'react';\nimport classnames from 'classnames';\n\ntype Props = {\n  addMovie: (movie: Movie) => void;\n};\n\ninterface Validation {\n  isTitleValid: null | boolean,\n  isImgValid: null | boolean,\n  isUrlValid: null | boolean,\n  isIdValid: null | boolean,\n  isMovieValid: boolean\n}\n\n// eslint-disable-next-line max-len\nconst regex = /^((([A-Za-z]{3,9}:(?:\\/\\/)?)(?:[-;:&=+$,\\w]+@)?[A-Za-z0-9.-]+|(?:www\\.|[-;:&=+$,\\w]+@)[A-Za-z0-9.-]+)((?:\\/[+~%/.\\w-_]*)?\\??(?:[-+=&;%@.\\w_]*)#?(?:[.!/\\\\\\w]*))?)$/;\n\nexport const NewMovie: React.FC<Props> = ({ addMovie }) => {\n  const [title, setTitle] = useState('');\n  const [description, setDescription] = useState('');\n  const [imdbUrl, setImdbUrl] = useState('');\n  const [imgUrl, setImgUrl] = useState('');\n  const [imdbId, setImdbId] = useState('');\n\n  const defaultValidation: Validation = {\n    isTitleValid: null,\n    isImgValid: null,\n    isUrlValid: null,\n    isIdValid: null,\n    isMovieValid: false,\n  };\n\n  const [validation, setValidation] = useState(defaultValidation);\n\n  const {\n    isTitleValid, isIdValid, isUrlValid, isImgValid, isMovieValid,\n  } = validation;\n\n  const validateProp = (value: string, prop: string) => {\n    let condition;\n\n    switch (prop) {\n      case 'isImgValid':\n      case 'isUrlValid':\n        condition = regex.test(value);\n        break;\n      case 'isMovieValid':\n        condition = isTitleValid && isIdValid && isImgValid && isUrlValid;\n        break;\n      default:\n        condition = value.trim().length;\n    }\n\n    if (condition) {\n      setValidation(prev => ({ ...prev, [prop]: true }));\n    } else {\n      setValidation(prev => ({ ...prev, [prop]: false }));\n    }\n  };\n\n  useEffect(() => {\n    validateProp('', 'isMovieValid');\n  }, [isTitleValid, isIdValid, isUrlValid, isImgValid]);\n\n  const resetAll = () => {\n    setTitle('');\n    setDescription('');\n    setImdbUrl('');\n    setImgUrl('');\n    setImdbId('');\n    setValidation(defaultValidation);\n  };\n\n  const handleSubmit = () => {\n    if (isMovieValid) {\n      addMovie({\n        title, description, imdbUrl, imgUrl, imdbId,\n      });\n      resetAll();\n    }\n  };\n\n  return (\n    <form className=\"form\">\n      <div className=\"field\">\n        <input\n          type=\"text\"\n          className={classnames('input', {\n            'is-success': isTitleValid,\n            'is-danger': isTitleValid === false,\n          })}\n          data-cy=\"form-title\"\n          placeholder=\"Movie title\"\n          value={title}\n          required\n          onChange={({ target }) => {\n            setTitle(target.value);\n            validateProp(target.value, 'isTitleValid');\n          }}\n        />\n      </div>\n      <div className=\"field\">\n        <input\n          type=\"text\"\n          className={classnames('input', {\n            'is-success': description.length,\n          })}\n          data-cy=\"form-description\"\n          placeholder=\"Description\"\n          value={description}\n          onChange={({ target }) => setDescription(target.value)}\n        />\n      </div>\n      <div className=\"field\">\n        <input\n          type=\"text\"\n          className={classnames('input', {\n            'is-success': isUrlValid,\n            'is-danger': isUrlValid === false,\n          })}\n          data-cy=\"form-imdbUrl\"\n          placeholder=\"URL\"\n          value={imdbUrl}\n          required\n          onChange={({ target }) => {\n            setImdbUrl(target.value);\n            validateProp(target.value, 'isUrlValid');\n          }}\n        />\n      </div>\n      <div className=\"field\">\n        <input\n          type=\"text\"\n          className={classnames('input', {\n            'is-success': isIdValid,\n            'is-danger': isIdValid === false,\n          })}\n          data-cy=\"form-imdbId\"\n          placeholder=\"Id\"\n          value={imdbId}\n          required\n          onChange={({ target }) => {\n            setImdbId(target.value);\n            validateProp(target.value, 'isIdValid');\n          }}\n        />\n      </div>\n      <div className=\"field\">\n        <input\n          type=\"text\"\n          className={classnames('input', {\n            'is-success': isImgValid === true,\n            'is-danger': isImgValid === false,\n          })}\n          data-cy=\"form-imgUrl\"\n          placeholder=\"Movie image\"\n          value={imgUrl}\n          required\n          onChange={({ target }) => {\n            setImgUrl(target.value);\n            validateProp(target.value, 'isImgValid');\n          }}\n        />\n      </div>\n      <button\n        type=\"submit\"\n        disabled={!isMovieValid}\n        className=\"button is-success\"\n        data-cy=\"form-submit-button\"\n        onClick={(e) => {\n          e.preventDefault();\n          handleSubmit();\n        }}\n      >\n        Add movie\n      </button>\n    </form>\n  );\n};\n","import React from 'react';\nimport './App.scss';\nimport { MoviesList } from './components/MoviesList';\nimport { NewMovie } from './components/NewMovie';\nimport moviesFromServer from './api/movies.json';\n\ninterface State {\n  movies: Movie[];\n}\n\nexport class App extends React.Component<{}, State> {\n  state: State = {\n    movies: moviesFromServer,\n  };\n\n  addMovie = (movie: Movie) => {\n    this.setState((state) => ({ movies: state.movies.concat(movie) }));\n  };\n\n  render() {\n    const { movies } = this.state;\n\n    return (\n      <div className=\"page\">\n        <div className=\"page-content\">\n          <MoviesList movies={movies} />\n        </div>\n        <div className=\"sidebar\">\n          <NewMovie addMovie={this.addMovie} />\n        </div>\n      </div>\n    );\n  }\n}\n","import ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}